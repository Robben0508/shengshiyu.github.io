<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>天马的故乡</title>
  <icon>https://www.gravatar.com/avatar/af826c880117989a83a2457623c21a52</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.shengshiyu.com/"/>
  <updated>2018-06-09T16:00:00.000Z</updated>
  <id>https://www.shengshiyu.com/</id>
  
  <author>
    <name>沉默的超云星</name>
    <email>shengshiyu0508@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于指针和数组</title>
    <link href="https://www.shengshiyu.com/2018/06/09/%E5%85%B3%E4%BA%8E%E6%8C%87%E9%92%88%E5%92%8C%E6%95%B0%E7%BB%84/"/>
    <id>https://www.shengshiyu.com/2018/06/09/关于指针和数组/</id>
    <published>2018-06-08T16:00:00.000Z</published>
    <updated>2018-06-09T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="http://pji58fv69.bkt.clouddn.com/%E5%85%B3%E4%BA%8E%E6%8C%87%E9%92%88%E5%92%8C%E6%95%B0%E7%BB%841.jpg" alt="关于指针和数组1.jpg"></p><blockquote><p>数组和指针之间可以说是联系非常紧密，但我们要清楚的明白，数组和指针并不相同。虽然我们总能听到一种声音“数组和指针是相同的，数组名就是一个指向数组首元素的指针，对于<code>a[2]</code>这样的数组，其实就相当于<code>*(a + 2)</code>”，我们就自然而然地认为数组和指针看起来是一样的，可以互换，除非是在我们实际应用过程中发现了问题，我们才会在不断修正中明白，其实数组和指针并不同，只有在满足一些条件的情况下，数组和指针才可以进行互换。</p></blockquote><h2 id="指针和数组的不同"><a href="#指针和数组的不同" class="headerlink" title="指针和数组的不同"></a>指针和数组的不同</h2><p>指针是用来保存数据的<strong>地址</strong>的变量，而数组则是用来<strong>保存数据</strong>；我们可以通过指针进行间接访问，取得里面的地址值，再通过那个地址值提取数据，如果p是一个指针，它有一个下标，例如<code>p[2]</code>,它就把指针里储存的地址值与2相加，再从这个新地址求值，而数组则是直接访问数据，<code>a[2]</code>只是简单的以<code>a + 2</code>的偏移量取得数据；指针通常指向<strong>匿名数据</strong>，而数组自身就是数据名，所以指针依赖于malloc(),free()这类函数来解决内存问题，而数组的话是隐式的分配和删除</p><h2 id="什么情况下指针可以和数组互换"><a href="#什么情况下指针可以和数组互换" class="headerlink" title="什么情况下指针可以和数组互换"></a>什么情况下指针可以和数组互换</h2><p>首先<strong><em>表达式里的数组名被编译器当做一个指向该数组第一个元素的指针</em></strong>时，例如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int a[5],*b,i = 2;</span><br></pre></td></tr></table></figure></p><p>那么我们访问<code>a[i]</code>时，可以通过以下方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b = a;</span><br><span class="line">b[i];</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b = a;</span><br><span class="line">*(b+i);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b = a + i;</span><br><span class="line">*b;</span><br></pre></td></tr></table></figure><p>C语言把数组下标改写为指针偏移量的根本原因是因为指针和偏移量是底层硬件使用的基本模型。当<strong><em>下标总是与指针的偏移量相同</em></strong>时，也可以互换。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for(i = 0; i&lt;=10; i ++)</span><br><span class="line">a[i] = 0;</span><br></pre></td></tr></table></figure></p><p>相当于<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">b = a;</span><br><span class="line">for (i = 0; i&lt;=10; i++)</span><br><span class="line">b[i] = 0;</span><br></pre></td></tr></table></figure></p><p>其中的<code>b[i] = 0</code>又可以写成<code>*(b + i) = 0</code></p><hr><p>如果声明是<code>int *a[]</code>呢，由于下标的优先级更高所以他表示一个数组，它里面的元素类型是指向整型的指针，所以它相当于一个<strong>指针数组</strong>。指针数组最频繁的用处在于储存长度不同的字符串，因为你不用固定分配大小去浪费储存空间，指针数组更具动态扩展性。</p><p>我们可以使用括号，使得<code>int (*a)[]</code>，那么它就表示一个<strong>指向整型数组的指针</strong></p><p>还有一种情况数组名等于指针，那就是<strong><em>当一个数组作为函数参数时</em></strong>，因为编译器会把数组的形式改写为指向数组的第一个元素的指针的形式，他只像函数传递一个地址值，而不是整个数组的拷贝，这更多是出于效率考虑。例如<code>int (*abc())[10]</code>,abc是一个函数，他返回一个指向包含10个int元素的数组的指针</p><p>在C语言中，严格来说，函数是不能直接返回函数和数组的，但可以让函数返回一个指向任何数据类型的指针，例如<code>int *a()</code>,它的返回值是一个指向整型的指针，而<code>int (*a)()</code>，左边的一对对括号迫使间接访问在函数调用之前进行，使a成为一个<strong>函数指针</strong>,它所指向的函数返回一个整型值。</p><p>我们再来看下<code>int *(*a)()</code>,它所指向的函数的返回值是一个指向整型的指针。如果声明是<code>int (*a[])()</code>，可能有点复杂，但实质上它表示一个数组，数组的类型是指向函数的指针，它所指向的函数的返回值是一个整数，如果声明是<code>int *(*a[])()</code>，我们就知道，它表示一个数组，数组的类型是指向函数的指针，而它所指向的函数的返回值是一个指向整型的指针。</p><h2 id="关于指针和多维数组"><a href="#关于指针和多维数组" class="headerlink" title="关于指针和多维数组"></a>关于指针和多维数组</h2><p>对于C语言而言，定义和引用一个多维数组的办法就是使用<strong>数组的数组</strong>，也就是数组的嵌套，例如<code>a[3][5]</code>，那么a是啥呢，我们可以把它看作是一个一维数组，它包含三个元素，每个元素包含五个整型值，所以a所指向的就是一个包含五个元素的数组<img src="http://pji58fv69.bkt.clouddn.com/%E5%85%B3%E4%BA%8E%E6%8C%87%E9%92%88%E5%92%8C%E6%95%B0%E7%BB%842.jpg" alt="多维数组"><br>而a+1就相当于指向a的另一行数组，如果是<code>*(a+1)</code>则表示他指向那一行的第一个元素而<code>*（a+1)+1</code>，其实就相当于比原来的表达式向后移动了一个元素，如果对整个表达式进一步处理一下，<code>*(*（a+1)+1)</code>,那么它作为右值就相当于对那个位置的值间接引用，而作为左值，这个位置就代表那块空间，它可以被赋予新值。</p>]]></content>
    
    <summary type="html">
    
      数组和指针之间可以说是联系非常紧密，但我们要清楚的明白，数组和指针并不相同。虽然我们总能听到“数组和指针是相同的，数组名就是一个指向数组首元素的指针，可以互换。”其实数组和指针并不同，只有在满足一些条件的情况下，数组和指针才可以进行互换。
    
    </summary>
    
      <category term="Technology" scheme="https://www.shengshiyu.com/categories/Technology/"/>
    
    
      <category term="C/C++" scheme="https://www.shengshiyu.com/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>指针和操作符</title>
    <link href="https://www.shengshiyu.com/2018/06/08/%E6%8C%87%E9%92%88%E5%92%8C%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    <id>https://www.shengshiyu.com/2018/06/08/指针和操作符/</id>
    <published>2018-06-07T16:00:00.000Z</published>
    <updated>2018-06-07T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="http://pji58fv69.bkt.clouddn.com/%E6%8C%87%E9%92%88%E5%92%8C%E6%93%8D%E4%BD%9C%E7%AC%A61.jpg" alt="指针和操作符2.jpg"></p><h2 id="关于操作符你需要知道"><a href="#关于操作符你需要知道" class="headerlink" title="关于操作符你需要知道"></a>关于操作符你需要知道</h2><p>在谈论指针之前，我们很有必要说一下C语言里的操作符，C语言里有着种类繁多的操作符，大致分为<strong>算术操作符</strong>(+ - <em> / %)、<strong>移位操作符</strong>(&lt;&lt; &gt;&gt;)、<strong>位操作符</strong>(&amp; | ^)、<strong>赋值符</strong>(=)、<strong>复合赋值符</strong>(+= -= </em>= %= /= &lt;&lt;= &gt;&gt;= &amp;= |= ^=)、<strong>单目操作符</strong>(! ++ – - &amp; sizeof ~ + <em>)<strong>关系操作符</strong>(&gt; &lt; == &gt;= &lt;= !=)<strong>逻辑操作符</strong>(&amp;&amp; ||)<strong>条件操作符</strong>(expression1 ? expression2 : expression3)、<em>*逗号操作符</em></em>(,)</p><p>操作符的复杂体现在它的<strong>优先级</strong>和<strong>结合性</strong>，两个相邻的操作符哪一个先执行取决于它的优先级，在他们优先级相同的情况下又要考虑它们的结合性，是左结合还是右结合，尤其是和指针联系在一起时很容易产生错误的执行结果，因为相对于其他语言，诸如Java、Python来说，指针是C语言的一个特色，也是一个难点。</p><p>对于操作符的优先级问题，可能一个最直接有效的办法就是<strong>添加括号</strong>，但是当表达式有太多的括号时反而不容易理解，所以适当的记住一些常见易混的操作符优先级，并适当的使用括号来辅助是一种很不错的方法。我们需要记住任何一个逻辑运算符的优先级要低于任何一个关系运算符，而移位操作符的优先级比算术操作符要低，但要比关系操作符高。<br><img src="http://pji58fv69.bkt.clouddn.com/%E6%8C%87%E9%92%88%E5%92%8C%E6%93%8D%E4%BD%9C%E7%AC%A62.jpg" alt="指针和操作符2.jpg"></p><h2 id="关于指针你需要知道"><a href="#关于指针你需要知道" class="headerlink" title="关于指针你需要知道"></a>关于指针你需要知道</h2><p>指针实质是<strong>表示内存地址的变量</strong>，指针主要做两件事：<strong>避免副本</strong>和<strong>共享数据</strong>。由于C语言中的一切函数调用中，值传递都是“按值传递”的，它会创建一个拷贝的副本来进行操作，如果我们要在函数中修改被传递过来的对象，就必须通过这个对象的指针来完成，也就是“按址传递”，而这个过程数据是共享的。所有赋值都会复制数据，如果你想复制数据的引用，就应该赋指针。</p><p>对指针进行间接访问之前，确认它们已经被初始化，否则仅仅声明了一个指针却没有对他进行初始化，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int *a;</span><br><span class="line">*a = 12;</span><br></pre></td></tr></table></figure></p><p>是没法得知它的正确地址的，因为声明一个指针变量并不会分配任何内存。</p><h2 id="指针和操作符的问题"><a href="#指针和操作符的问题" class="headerlink" title="指针和操作符的问题"></a>指针和操作符的问题</h2><p>我们现在作一个声明<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int ab = 4;</span><br><span class="line">int *cp = &amp;ab;</span><br></pre></td></tr></table></figure></p><blockquote><p>当不同的表达式作为<strong>左值</strong>和<strong>右值</strong>时，它们表达的东西是不同的，对于左值来说，他表示的是一块<strong>明确的地址空间</strong>，而右值是一块<strong>地址空间里的值</strong>。</p></blockquote><p><strong><em>当我们的表达式是<code>&amp;ab</code>时</em></strong>，作为右值他表示变量ab的储存空间地址值，他也有一个地方来储存这个值，但我们没办法知道那块空间的具体位置，没有标识是一个明确的特定位置，所以作为左值，使用取址操作符的变量都是非法的。</p><p><strong><em>当我们的表达式是<code>cp</code>时</em></strong>，作为左值他就表示的是cp本身的地址空间，作为右值就是表示变量ab的地址值。</p><p><strong><em>当我们的表达式是<code>&amp;cp</code>时</em></strong>，我们知道他不能作为左值，对于右值来说，他是一个空间地址的值，也就是指针变量所在的那块空间的地址值，而指针变量中又保存着他指向那个对象的地址值，也就是<strong>指针的指针</strong>。对于指针的指针，类似于<code>int **a</code>,<strong>只有当确实需要时，才应该使用多层间接访问，不然程序会变得难以维护和理解</strong>。</p><p><strong><em>当我们的表达式是</em></strong><code>*cp</code><strong><em>时</em></strong>，它相当于一个<strong>间接访问</strong>(解引用)，作为左值就表示ab所在那块空间，我们可以将新的值作为右值替换掉里面的原内容，作为右值就表示那块空间里原本存放的内容。</p><p><strong><em>当我们的表达式是</em></strong><code>*cp + 1</code><strong><em>时</em></strong>，由于<code>*</code>操作符的优先级高于<code>+</code>，所以首先执行<code>*cp</code>,作为右值也就是<code>ab</code>里保存的内容4,所以作为右值的结果就是5，但作为左值，我们知道这个结果需要一个位置保存，但那个位置没有明确定义，所以作为左值是不合法的。</p><p><strong><em>当我们的表达式是</em></strong><code>*(cp + 1)</code><strong><em>时</em></strong>,作为右值，我们知道cp他表示ab的地址值，由于有括号，所以优先级更高，地址值+1后对那块地址值空间进行间接引用，获得那块空间里保存的对象。</p><blockquote><p>涉及到前置和后置递增递减运算符时，可能是最容易产生错误的了，无论是前置递增（递减）操作符还是后置递增（递减）操作符时，他都会产生一个原指针的拷贝，也就是里面所保存的指向某一内容的地址值，然后拷贝的这个地址值会放到一个新的空间里，如果是前置递增（递减）操作符会先进行原地址值的自增（自减）操作，所以他复制的拷贝会是自增（自减）后的新地址值，然后新的指针和原指针都将指向一个新的位置，并可以在拷贝上执行间接访问操作，访问那个未知的值；如果是后置，不会先进行自增操作求值，所以拷贝的值会是原指针的地址值，它和原指针指向相同的位置，而之前保存地址的那个位置将进行自增/自减操作，地址值更新并指向一个新的位置，由于我们是在拷贝的指针上执行间接访问操作，所以依然指向原地址值，例如：</p></blockquote><p><code>++cp</code>,在进行运算前他会先获取一个自增后的拷贝，我们知道作为<strong>右值</strong>时，<code>cp</code>代表的就是<code>ab</code>那个位置的<strong>地址值</strong>，由于自增，所以指向它的下一个地址值，但作为左值，因为自增后的拷贝结果是位于一个无法清晰定义的位置，所以不能作为左值。</p><p><code>cp++</code>,由于是后置自增运算，所以不会<strong>先</strong>进行自增操作，所以拷贝的值的位置依然指向<strong>原地址</strong>，而原<code>cp</code>会在运算结束后求值，所以它会指向ab位置的下一块内存空间。</p><p><code>*++cp</code>，通过<code>++cp</code>我们知道它指向的是<code>ab</code>的下一块内存空间，由于<code>*</code>的操作符优先级要比自增（自减）操作符低，所以它相当于<code>(*(++cp))</code>，而对那块空间执行<strong>间接引用</strong>，作为左值表示那块空间的，而作为右值则表示那块空间里<strong>存储的未知值</strong>。</p><p><code>*cp++</code>,通过运算符优先级我们知道，它相当于<code>(*(cp++))</code>,由于<code>cp++</code>的结果是指向<code>ab</code>，所以作为左值<code>*cp++</code>就表示<code>ab</code>所在的那个<strong>地址空间</strong>，而作为右值，它就是<code>ab</code>保存的值——4。</p><p><code>++*cp</code>,根据运算符优先级，它相当于<code>(++(*cp))</code>，我们确实<strong>先</strong>进行自增操作，但由于<code>*cp</code>是一个整体，所以先对其<strong>本身</strong>求值，也就是4，然后我们复制一份拷贝，将运算结束后的新值5保存进去。所以对于<strong>字符串的操作</strong>，如果使用<code>*++string</code>,会漏掉首字符，所以用<code>*string++</code>可以方便对字符串进行遍历。</p><p><code>(*cp)++</code>，如果不通过括号，我们要表达的就是<code>*cp++</code>，也就是<code>*(cp++)</code>，在这里我们就是先对<code>cp</code>进行间接引用取得<code>ab</code>保存的值，然后进行后置自增运算。</p><p><code>++*++cp</code>，根据操作符优先级，它的意思就是<code>(++(*(++cp)))</code>,由于<code>(*++cp)</code>，我们知道作为<strong>右值</strong>是对<code>ab</code>的下一块空间的位置的<strong>间接引用</strong>，再对那个保存的未知值进行前置<strong>自增</strong>运算，但作为左值它是不合法的，因为自增后新值保存的那块空间位置不明确。</p><p><code>++*cp++</code>,根据前面的经验，我们可以知道它相当于<code>((++(*(cp++))))</code>,而<code>*cp++</code>作为<strong>右值</strong>相当于指向<code>ab</code>，进行<strong>间接访问</strong>的值为4,对其进行前置递增运算，并将拷贝计算的新值保存到一个新的位置，因为那个位置不明确，所以不能作为一个合法的左值。</p><blockquote><p>通过上面的分析，我们发现，优先级上最后进行自增(自减)运算的不能作为一个左值使用，而取址操作符&amp;也一样，因为它们产生的新的值(不是地址值)会被保存到新的未知未知，所以不能作为左值使用。我们也发现”指针 +/- 整数”,只能作为右值，其根本上就是对了里面保存的地址值的运算</p></blockquote><h2 id="define、typedef和指针"><a href="#define、typedef和指针" class="headerlink" title="#define、typedef和指针"></a>#define、typedef和指针</h2><p>C语言里，<code>typedef</code>是一个很不错的机制，他可以给数据类型定义新的名字，和使用<code>#define</code>重定义常量的用法很像，但要注意的是，<code>#define</code>没办法很好的处理指针类型，例如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#define char_pointer char*</span><br><span class="line">char_point a,b;</span><br></pre></td></tr></table></figure></p><p>那么其中的b就不能被正确的声明为一个指向字符的指针类型，而用typedef就不一样了，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">char *char_pointer;//声明一个指向字符的指针类型</span><br><span class="line">typedef char *char_pointer;//把char_pointer作为指向字符的指针的新名字</span><br><span class="line">char_pointer a;//声明a是一个指向字符的指针</span><br></pre></td></tr></table></figure></p><p>就可以很好的用来处理指针类型。</p>]]></content>
    
    <summary type="html">
    
      C语言的特色就在于指针，可以说指针就是C语言的灵魂。这是我第一次写关于C指针的文章，我想尽可能的就指针运算过程中遇到的诸多问题，谈一下我的理解。
    
    </summary>
    
      <category term="Technology" scheme="https://www.shengshiyu.com/categories/Technology/"/>
    
    
      <category term="C/C++" scheme="https://www.shengshiyu.com/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>Markdown小记</title>
    <link href="https://www.shengshiyu.com/2018/01/05/Markdown%E5%B0%8F%E8%AE%B0/"/>
    <id>https://www.shengshiyu.com/2018/01/05/Markdown小记/</id>
    <published>2018-01-04T16:00:00.000Z</published>
    <updated>2018-01-05T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="http://pji58fv69.bkt.clouddn.com/Markdown%E5%B0%8F%E8%AE%B01.jpg" alt="Markdown小记1.jpg"><br><br></p><blockquote><p>Markdown的语法很简单，以下是它的一些最常用的操作，如果已经熟悉了，可以无视本文档</p></blockquote><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><ul><li>通常来说如果你需要排列标题，可以在行首插入1到6个#，对应标题的1到6阶,最高可以到六级标题，最好在#后加一个空格例如:<br><br><code># 这是一级标题</code><br><br><code>## 这是二级标题</code><br><br><code>####### 这是六级标题</code></li><li>也可以使用<code>=====</code>表示高级标题，使用<code>------</code>表示次级标题，大于两个<code>=</code>,<code>-</code>都可以用来表示标题</li></ul><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>如果你需要一个引用，那么你可以使用<code>&gt;</code>符号放于文字开头，例如:<br><br><code>&gt;这是一个引用</code><br><br>区块引用是可以嵌套的，同时引用的区块内也可以使用其他的Markdown语法，例如<br></p><blockquote><p>这是一个引用</p><blockquote><p>这是第另一个引用</p></blockquote><p>##这是标题</p><ol><li>列表项</li><li>列表项</li></ol></blockquote><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>如果你需要一个列表，在Markdown里，你可以选择有序列表和无序列表两种方式，列表本身可以嵌套，例如</p><ul><li>列表项</li><li>列表项</li><li>列表项<ul><li>嵌套列表</li><li>嵌套列表</li></ul></li></ul><p>无序列表可以使用<code>*</code>、<code>+</code>、<code>-</code>这三个符号中的任何一种作为列表标记，也可以和引用结合嵌套</p><ol><li>列表项</li><li>列表项</li><li>列表项<blockquote><p>这是一个嵌套的引用</p><blockquote><p>可以进一步嵌套</p></blockquote></blockquote></li></ol><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><ul><li><strong>粗体</strong>: 通常用<code>**</code>或者<code>__</code>表示粗体</li><li><em>斜体</em>: 通常用<code>*</code>或者<code>_</code>表示斜体</li><li><strong><em>斜粗体</em></strong>：通常用<code>***</code>或者<code>___</code>表示斜粗体</li></ul><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>如果你需要链接文字，可以使用<code>[](link)</code>表示一个链接，其中<code>[]</code>内是需要添加链接的文字，<code>()</code>内是链接的地址</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ul><li><p>使用一对```表示代码块，可以根据Markdown编辑器,选择在第一个```后添加代码的language，产生高亮效果，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>使用一对`可以表示一个行内代码，例如：<br>这是一个<code>Java</code>代码</p></li></ul><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>如果你需要导入一张图片，可以使用<code>![Text](path)</code>，其中Text表示图片无法显示时显示的文字，path为图片所在的路径，也可以是网上的图片地址</p><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>如果你需要一条分割线，可以使用<code>---</code> 或者<code>***</code>表示水平分割线，只要<code>-</code>,<code>*</code>大于三个就可以表示水平分割线，使用<code>---</code>作分割线时需要前后都空一行，防止被当成标题的标记方式</p><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p>如果你需要一条<del>删除线</del>,可以使用一对<code>~~</code>表示删除线，但切记和文字之间不能有空格</p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>可以使用以下的格式添加表格,注意表格和文字间空一行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| name  | age | gender    | money  |</span><br><span class="line">|-------|:---:|-----------|-------:|</span><br><span class="line">| rhio  | 384 | robot     | $3,000 |</span><br><span class="line">| haroo | .3  | bird      | $430   |</span><br><span class="line">| jedi  | ?   | undefined | $0     |</span><br></pre></td></tr></table></figure></p><table><thead><tr><th>name</th><th style="text-align:center">age</th><th>gender</th><th style="text-align:right">money</th></tr></thead><tbody><tr><td>rhio</td><td style="text-align:center">384</td><td>robot</td><td style="text-align:right">$3,000</td></tr><tr><td>haroo</td><td style="text-align:center">.3</td><td>bird</td><td style="text-align:right">$430</td></tr><tr><td>jedi</td><td style="text-align:center">?</td><td>undefined</td><td style="text-align:right">$0</td></tr></tbody></table><p><br></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>如果用 Markdwon 的语法却达不到预期效果，或者一些地方的处理用 Markdwon 的语法无法实现，可以考虑用 HTML 和 CSS</p><ul><li><p>引用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;blockquote&gt;***&lt;/blockquote&gt;</span><br><span class="line">/* 如果上下间距小，可以这样写 */</span><br><span class="line">&lt;p&gt;&lt;blockquote&gt;***&lt;/blockquote&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure></li><li><p>居中和右对齐</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/* 居中 */</span><br><span class="line">&lt;center&gt;**&lt;/center&gt;</span><br><span class="line">/* 右对齐 */</span><br><span class="line">&lt;p style=&quot;text-align:right&quot;&gt;**&lt;/p&gt;</span><br><span class="line">/* 右对齐 */</span><br><span class="line">&lt;p style=&quot;text-align:left&quot;&gt;**&lt;/p&gt;</span><br></pre></td></tr></table></figure></li><li><p>字体大小和颜色</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;font color=&quot;#xxxxxx&quot; size=&quot;number&quot;&gt;**&lt;/font&gt;</span><br></pre></td></tr></table></figure></li><li><p>分割线和空行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;hr /&gt;</span><br><span class="line">&lt;br /&gt;</span><br></pre></td></tr></table></figure></li></ul><h6 id="关于Markdown的更多细节，可以参看Markdown-语法说明-简体中文版"><a href="#关于Markdown的更多细节，可以参看Markdown-语法说明-简体中文版" class="headerlink" title="关于Markdown的更多细节，可以参看Markdown 语法说明 (简体中文版)"></a>关于Markdown的更多细节，可以参看<a href="https://www.appinn.com/markdown/" target="_blank" rel="noopener">Markdown 语法说明 (简体中文版)</a></h6>]]></content>
    
    <summary type="html">
    
      Markdown是一种轻量级的标记语言，它允许人们使用易读易写的方式来使用纯文本编写文档，然后转换成HTML页面。这一份小记用来记录其中常用的语法，搜集整理以方便查阅。
    
    </summary>
    
      <category term="Technology" scheme="https://www.shengshiyu.com/categories/Technology/"/>
    
    
      <category term="Markdown" scheme="https://www.shengshiyu.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>列表解析的效率问题</title>
    <link href="https://www.shengshiyu.com/2017/12/08/%E5%88%97%E8%A1%A8%E8%A7%A3%E6%9E%90%E7%9A%84%E6%95%88%E7%8E%87%E9%97%AE%E9%A2%98/"/>
    <id>https://www.shengshiyu.com/2017/12/08/列表解析的效率问题/</id>
    <published>2017-12-07T16:00:00.000Z</published>
    <updated>2017-12-07T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="在列表，字典，集合中根据条件筛选数据"><a href="#在列表，字典，集合中根据条件筛选数据" class="headerlink" title="在列表，字典，集合中根据条件筛选数据"></a>在列表，字典，集合中根据条件筛选数据</h1><ul><li><p><strong>列表</strong></p><ul><li><p>filter</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filter(<span class="keyword">lambda</span> x:x &gt; <span class="number">20</span>,data)</span><br></pre></td></tr></table></figure></li><li><p>列表解析 </p></li></ul></li><li><p><strong>字典</strong></p><ul><li>字典解析<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="keyword">for</span> k,v <span class="keyword">in</span> d.interitems() <span class="keyword">if</span> v &gt;= <span class="number">20</span>&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>集合</strong></p><ul><li>集合解析<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;x <span class="keyword">for</span> x <span class="keyword">in</span> s <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong>注意</strong>：列表解析也可能会被滥用，例如使用列表解析重复获取一个函数等。所以并非一味地使用列表解析式就是好的。</p><p><strong>原则</strong>：尽量保持其简洁，列表解析的代码不要超过两行以上，只用它来创建新的列表，否则的话还是考虑使用for循环来重写。</p>]]></content>
    
    <summary type="html">
    
      列表解析，或者称作列表推导（list comprehension),是一种灵活高效的创建列表的方式，对于提高的代码可读性很有帮助，虽然for循环可以胜任很多的工作，但适当的使用列表解析式会让代码读起来简洁易懂（相对一层层的for循环而言）。
    
    </summary>
    
      <category term="Technology" scheme="https://www.shengshiyu.com/categories/Technology/"/>
    
    
      <category term="python" scheme="https://www.shengshiyu.com/tags/python/"/>
    
  </entry>
  
</feed>
