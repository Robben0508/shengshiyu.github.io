<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>天马的故乡</title>
  <icon>https://www.gravatar.com/avatar/af826c880117989a83a2457623c21a52</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.shengshiyu.cn/"/>
  <updated>2019-02-07T15:26:26.490Z</updated>
  <id>https://www.shengshiyu.cn/</id>
  
  <author>
    <name>沉默的超云星</name>
    <email>shengshiyu0508@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://www.shengshiyu.cn/2019/01/27/%E9%9D%9E%E2%80%9C%E4%BD%A0%E2%80%9D%E4%B8%8D%E5%8F%AF/"/>
    <id>https://www.shengshiyu.cn/2019/01/27/非“你”不可/</id>
    <published>2019-01-27T15:30:06.124Z</published>
    <updated>2019-02-07T15:26:26.490Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p>title: 非“你”不可<br>date: 2018-02-16<br>updated: 2018-02-16<br>categories: Thinking<br>tags: 思考</p><h2 id="description"><a href="#description" class="headerlink" title="description:"></a>description:</h2><p><img src="http://blog0508.oss-cn-beijing.aliyuncs.com/image/%E9%9D%9E%E2%80%9C%E4%BD%A0%E2%80%9D%E4%B8%8D%E5%8F%AF.jpg" alt="非“你”不可"></p><p>我们之所以要购买产品和服务，是因为我们其实需要购买产品来完成某项特定的任务。而这一项任务或许并不一定要具有实用价值，因为很多外观新颖，功能独特的产品其实在我们身边也有完全可以替代它们的东西，或许是因为我们“认为”它们能更出色的完成任务，但事实上并不一定。</p><p>因为我们需要的不是种种形式本身，而是这些形式所能满足的需求恰好我们需要，而有一些在完成一项工作时确实不错</p><p>柔性电子产品分为三大类：柔性屏幕，柔性电池和柔性集成电路，国内最大的是柔宇科技，国外是三星，我觉得这个产品是否更“出色”，不是他外观的新颖，形式的创新，他比现有全面屏的优势是他在全面屏满足的需求上更解决了什么问题，哪些地方更好，而这些点应该紧贴用户的需求，这样产品才能被买单，又或者这项技术的使用领域是否不合适，在其他地方使用这把“刀”要比原有的方式更出色，那么技术就用到了点子上，一意孤行的去创造一种新形式的产品，哪怕它具有很高科技的技术，但他所能解决问题的能力并不比其他传统产品大多少，注定是要陨落的</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>文化与媒介</title>
    <link href="https://www.shengshiyu.cn/2019/01/15/%E6%96%87%E5%8C%96%E4%B8%8E%E5%AA%92%E4%BB%8B/"/>
    <id>https://www.shengshiyu.cn/2019/01/15/文化与媒介/</id>
    <published>2019-01-14T16:00:00.000Z</published>
    <updated>2018-01-14T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="http://blog0508.oss-cn-beijing.aliyuncs.com/image/%E6%96%87%E5%8C%96%E4%B8%8E%E5%AA%92%E4%BB%8B.jpg" alt="文化与媒介"></p><blockquote><p>有人说文化可以用四句话表达：植根于内心的修养，无须提醒的自觉，以约束为前提的自由，为他人着想的善良。</p></blockquote><p>“文化”是一个很抽象的概念，它本身也具有很强的人文意味，因为文化本身就是“人文化成”的一个缩写。人文一词在我看来，它是把很多客观现实的存在经过我们人为的重组与再认知，概括为了一个抽象层次更高的概念，而它是客观世界原本不存在的，并且它可以成为我们的一种生活方式。</p><p>相对于其他物种而言，“文化”活动可以说是人类所独有的，对于人类而言，文化是不可或缺的。为什么文化显得重要，从其他角度来看，或许文化是一种非物质化的“媒介”，它抽象层次更高，依托于很多不同的实体，它本身就能很好的传递一些信息，但它也可以很抽象，令人难以理解。</p><p>作为媒介而言，它最重要的作用就是作为承载信息的桥梁，实现信息的交换，如果一个媒介在信息交换的速度上很快，那么它对整个社会的影响力也会不断提高。文化，无论是对社会，还是对国家，又或者对公司，乃至个人，在某些方便都可以算是一个很好的“媒介”。但它不像文字或是图片，具有固定的形式，文化是不同实体结合抽象后的统称。</p><p>一些思想的具体内容，可能以文字这类形式没法具体的传递给对方，例如，中国传统武术文化里，太极的思想，其实它是一个极为抽象的概念，可能通过文字的理解我们很难领悟其中的真谛，达到知行合一。但武术文化不同，它将这样的思想和具体的动作结合，当我们在演练时，我们可以通过具体的动作，将那种刚柔并济，圆润统一之意具体的外化表现出来，通过这样的形式加深我们对于“太极”的理解，乃至上升到哲学里的矛盾的对立与统一。这类复杂抽象的哲学思想，通过武术文化的具象表现形式，可以有效地传递给对方。</p><p>不同的地方有着不同的文化，它们所承载的东西也截然不同。就像在公司工作时，当一个公司刚起步，处于初创阶段，可能人才，资金，技术会很重要，但随着时间的推移，公司不断的发展壮大，就需要把这些有形资源变为具体的流程和价值标准来执行，当一个公司发展足够庞大，那么就需要企业拥有自己的文化，由文化价值观来驱动各项流程的顺利实施。所以我们不光要学习国外先进企业的研发能力，更要学习他们的职业文化，达成企业到员工之间的一种无形的沟通桥梁。</p><p>若有更好的方式能实现“文化”所发挥的作用，那么文化的作用便会被弱化，但在某些方面“文化”确实是一个出色的“媒介”。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Thinking" scheme="https://www.shengshiyu.cn/categories/Thinking/"/>
    
    
      <category term="思考" scheme="https://www.shengshiyu.cn/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>浅谈Spring Bean的生命周期和作用域</title>
    <link href="https://www.shengshiyu.cn/2019/01/02/%E6%B5%85%E8%B0%88Spring%20Bean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <id>https://www.shengshiyu.cn/2019/01/02/浅谈Spring Bean的生命周期和作用域/</id>
    <published>2019-01-01T16:00:00.000Z</published>
    <updated>2019-01-01T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Technology" scheme="https://www.shengshiyu.cn/categories/Technology/"/>
    
    
      <category term="Java" scheme="https://www.shengshiyu.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>TCP和UDP浅析</title>
    <link href="https://www.shengshiyu.cn/2018/12/26/TCP%E5%92%8CUDP%E6%B5%85%E6%9E%90/"/>
    <id>https://www.shengshiyu.cn/2018/12/26/TCP和UDP浅析/</id>
    <published>2018-12-25T16:00:00.000Z</published>
    <updated>2018-12-25T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p><img src="http://blog0508.oss-cn-beijing.aliyuncs.com/image/TCP%E5%92%8CUDP%E6%B5%85%E6%9E%90.jpg" alt="TCP和UDP浅析"></p><h1 id="关于UDP你需要知道"><a href="#关于UDP你需要知道" class="headerlink" title="关于UDP你需要知道"></a>关于UDP你需要知道</h1><p>UDP继承了IP包的特性，不保证不丢失，不保证顺序到达，它只管发出去，打个比方，它就像懵懂无知的小孩，它认为只要是发出去的东西，很容易就能送达，不会丢包。而且它<strong>不会建立连接，它也不会进行拥塞控制</strong>，只管往外发就行，一根筋。</p><p>虽然UDP报文<strong>没有可靠性保证</strong>、<strong>顺序保证和拥塞控制</strong>，<strong>可靠性较差</strong>。但也正因为如此，UDP协议的控制选项较少，在数据传输过程中<strong>延迟小</strong>、<strong>数据传输效率高</strong>，适合对可靠性要求不高的应用程序，需要处理速度快，时延低，可以容忍少数丢包，或者可以保障可靠性的应用程序，如DNS、TFTP、SNMP等。</p><p>在网络质量很差的环境下，UDP协议数据包丢失会比较严重。但是由于它传输过程中资源消耗小，处理速度快，所以通常音频、视频和普通数据在传送时使用UDP较多，因为它们即使偶尔丢失一两个数据包，也不会对接收结果产生太大影响。</p><p>我们经常使用“ping”命令来测试两台主机之间TCP/IP通信是否正常，其实“ping”命令的原理就是向对方主机发送UDP数据包，然后对方主机确认收到数据包，如果数据包到达的消息及时反馈回来，那么网络就是通的。在默认状态下，一次“ping”操作发送4个数据包，对方主机发回的确认收到的数据包也是4包，这充分说明了UDP协议是<strong>面向非连接</strong>的协议，没有建立连接的过程。</p><p>UDP协议使用报头中的校验值来保证数据的安全。校验值首先在数据发送方通过特殊的算法计算得出，在传递到接收方之后，还需要再重新计算。如果某个数据包在传输过程中被篡改或者损坏，发送和接收方的校验计算值将不会相符，由此UDP协议可以检测出是否出错。</p><h1 id="关于TCP你需要知道"><a href="#关于TCP你需要知道" class="headerlink" title="关于TCP你需要知道"></a>关于TCP你需要知道</h1><p>TCP是<strong>基于连接</strong>的协议，在正式收发数据前，必须和对方建立可靠的连接。一个TCP连接必须要经过三次“握手”才能建立起来，也因为多了这样一个过程，TCP要比UDP复杂很多，可以看一下TCP头的格式。</p><p><img src="http://blog0508.oss-cn-beijing.aliyuncs.com/image/TCP%E5%92%8CUDP%E6%B5%85%E6%9E%901.jpg" alt="TCP和UDP浅析1"></p><p>TCP的包是没有IP地址的，那是IP层上的事。可以对比看出，相对于UDP来说，TCP多了一个<strong>序号</strong>，这个序号的作用是为了给发送的包标号，<strong>防止乱序</strong>，这样我们好知道哪一个应该先来，哪一个后来，做到有理有序。</p><p>其次，它还具有一个<strong>滑动窗口</strong>，我们可以理解为这就是一个管道的大小，越大自然水的流速流量可以更大，越小自然流速就会变小，流量变少，TCP也一样，窗口的大小就是为了能够控制流量的，通过标识窗口大小，就可以知道对方的处理能力，而不会发送过快了，造成拥塞问题，用于<strong>解决流控</strong>的。</p><h2 id="TCP-三次握手"><a href="#TCP-三次握手" class="headerlink" title="TCP 三次握手"></a>TCP 三次握手</h2><p>TCP连接的建立，我们通常称为“三次握手”，打个比方，大概就是这样：<br><strong>A：你好，我是A，想和你连接<br>B：你好A，我是B，我收到你提出的连接请求了<br>A：好的B，收到了</strong></p><p>为啥一定要是三次呢？不是两次或者四次，当A发起一个连接是，如果B没有回复，它又如何知道B收到了呢，它会以为包丢了，或者超时未达，又或者B压根不想和它连接，它会很懵逼，以至于可能再发。</p><p>当B收到了请求包，就知道了A的存在，也知道A想和它连接，而且它要是不回复，A会继续重试“骚扰”它一阵子，直到A自己放弃，建立连接失败。如果B愿意连接，OK，立马发个应答包过去，告诉A，我同意和你连接了。</p><p>但是，这个过程一样会遇到种种未知错误，比如这个应答包丢了。。。那A不知道啊，继续“骚扰”。。。所以B为了不受其烦，肯定要为了确保应答到达，不断尝试重发，只要一次到达，它就解脱了。至于怎么确认到达，当然是等A收到了应答包，然后欢呼雀跃的再发送一个应答包，表示”收到了，我们连接吧！“不过你可能会觉得，那我们也要确定A这个应答包到达B啊，不然B咋知道A收到他第二次握手发的包，难道不应该四次握手吗？<br>其实四次握手也是可以的，几十上百次都OK，但那也不能保证就真的可靠了，只要双方的消息都有去有回，就基本可以了。</p><p>A当然可以建立连接后空闲着，就是不“搭理”B，对于B来说，对于A这种“占着茅坑不拉屎”的行为，自然可以选择主动关闭，从而把空出的资源给其他客户端使用。</p><p>TCP里的序号在“三次握手”中，可以很有效的解决丢包问题，当它俩连接后，A发送了很多个有序排列的包，但中途可能由于种种未知原因，丢了一个，A不知道，但B知道A发的包的总数，它一数，好像差了一个，然后再告诉A。而且这个序号的起始序号是随时间变化的，不会重复，为了防止某些包绕路，等到了其实已经无用了，所以IP包头里有个TTL，也就是生存时间。</p><p>这里有个<strong>时序图</strong>，可以看一下，而且TCP头里还有一些<strong>状态位</strong>，其中<strong>SYN</strong>表示发起一个连接，<strong>ACK</strong>表示回复，<strong>RST</strong>表示重新连接，<strong>FIN</strong>表示结束连接，这样这个时序图就好理解了。</p><p><img src="http://blog0508.oss-cn-beijing.aliyuncs.com/image/TCP%E5%92%8CUDP%E6%B5%85%E6%9E%902.jpg" alt="TCP和UDP浅析2"></p><h2 id="TCP-四次挥手"><a href="#TCP-四次挥手" class="headerlink" title="TCP 四次挥手"></a>TCP 四次挥手</h2><p>嗯，说散就散，说完了连接，该说下“四次挥手”了，它大概是这样的：<br><strong>A：我们分手吧<br>B: 哦，你想分了啊，那好吧，知道了。。。</strong></p><p>这个时候，只是A想分手离开了，也就是A不再发送数据，那B能不能在ACK的时候直接选择关闭呢，反正A都要分了，自然是不行的，因为A可能是发完了最后的数据就准备分手了，但是B还没做完它的事情，还是可以发送数据的，处在一种半关闭状态，这个时候A可以选择不再接受数据，也可以选择最后再接受一段数据，等待B也主动关闭。于是就有了：<br><strong>B： OK，那我不陪你了，再见<br>A： 嗯，再见</strong></p><p>然后整个连接就关闭了，但是上面是一种理想情况下的分手，可能会遇到很多异常情况，例如，A说完分手后，直接走了，B不知道，B发的回复A就收不到了，B会陷入不知所措。也有可能是B说完分手后，他倒是处于半关闭的还在着，B直接生气走了，A也会陷入两难抉择，究竟B是还有事没处理完，还是一会就关闭了，针对这一系列问题，我们来看断开连接时候的时序图。</p><p><img src="http://blog0508.oss-cn-beijing.aliyuncs.com/image/TCP%E5%92%8CUDP%E6%B5%85%E6%9E%903.jpg" alt="TCP和UDP浅析3"></p><p>从图中我们可以看到，当A说分手了，就进入<strong>FIN_WAIT_1</strong>的状态，可以理解为等待结束第一阶段，而B回复完A后也相应进入<strong>CLOSE_WAIT</strong>状态，理解为等待关闭。A收到B的回复，就进入了<strong>FIN_WAIT_2</strong>状态，如果此时B直接离开了，那A就一直保持在这个状态。如果B没有离开，主动地又说“再见”，然后它就进入了<strong>LSAT_ASK</strong>状态，然后A收到了B说得“再见”他也发送响应，“嗯，再见”然后进入了<strong>TIME_WAIT</strong>状态，当B收到A的ASK就会关闭了。而假如这个ASK没有到达，因为只有到达B才会进入关闭，但A已经进入关闭倒计时了，它会保持在这个状态一段时间，然后自动的关闭了，所以这段时间里，B会不断地发送“再见”，直到收到一条A的ASK为止。</p><p>假如B在A的最后这段“停留期”，还是没有等来一个回复，虽然它还是会发，当A收到这个后，就会直接回复一个<strong>RST</strong>，B就知道A跑了，就不再发“再见”了。</p><h2 id="TCP-状态机"><a href="#TCP-状态机" class="headerlink" title="TCP 状态机"></a>TCP 状态机</h2><p>其实就是将TCP连接和分手的两个时序图结合起来，就是表面看起来高大上的<strong>TCP状态机</strong>了。网络上的传输是没有连接的，包括TCP也是一样的，所谓的连接不过是通讯的双方维护的一个“<strong>连接状态</strong>”<br><img src="http://blog0508.oss-cn-beijing.aliyuncs.com/image/TCP%E5%92%8CUDP%E6%B5%85%E6%9E%904.jpg" alt="TCP和UDP浅析4"></p>]]></content>
    
    <summary type="html">
    
      传输层里比较重要的两个协议，一个是TCP，一个就是UDP了，而且这两个协议往往放在一起来讲，那么它们之间具体的区别又是啥，又有什么联系呢？TCP的状态机又是什么？
    
    </summary>
    
      <category term="Technology" scheme="https://www.shengshiyu.cn/categories/Technology/"/>
    
    
      <category term="TCP" scheme="https://www.shengshiyu.cn/tags/TCP/"/>
    
  </entry>
  
  <entry>
    <title>谈谈大众传媒</title>
    <link href="https://www.shengshiyu.cn/2018/12/13/%E8%B0%88%E8%B0%88%E5%A4%A7%E4%BC%97%E4%BC%A0%E5%AA%92/"/>
    <id>https://www.shengshiyu.cn/2018/12/13/谈谈大众传媒/</id>
    <published>2018-12-12T16:00:00.000Z</published>
    <updated>2018-12-12T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="http://blog0508.oss-cn-beijing.aliyuncs.com/image/%E8%B0%88%E8%B0%88%E5%A4%A7%E4%BC%97%E4%BC%A0%E5%AA%92.jpg" alt="谈谈大众传媒"></p><p>互联网时代，与其说是流量的争夺战，不如说是注意力的争夺战。传统的纸媒时代早期，纽约《太阳报》的创立开启了广告赚钱吸引眼球的新模式。在那之前，广告仅仅作为新闻的一种信息补充，《太阳报》专门把传统公告栏的那些小的信息变成了高大上的广告，因为之前是没有真正意义上的广告业的。商家并不知道这样的模式，当这样的新模式诞生后，商家因此尝到了甜头，很乐意出钱给传统纸媒作宣传，而这也成为了那个时期纸媒的一个重要的收入来源。</p><p>同时《太阳报》里也更注重受众的需求，它们刊登的新闻讯息都是平民百姓很感兴趣的内容，例如自杀新闻和家庭风波，成功吸引了它们的注意力，然后也间接促成了广告事业的成功。这一点和如今的一些新媒体行业有很多相似之处，用内容去吸引用户，用流量的增长推动广告的成功，不仅仅是免费，甚至还会返利，只要你使用这个产品的时间越多，滞留的时间越长，就可以获得收益，可以在积累到了一定的限额提现。</p><p>“科学”的推荐算法，使得推送的内容满足了绝大部分用户“个性化”的需求，但也因此使你所收到的信息更多在你了解和感兴趣的范畴内。就像在搜索引擎中搜索一样，你不会知道那些你不知道的东西，所以你最终所了解的东西更多还是停留在了那个层面。</p><p>这是一个碎片化阅读盛行的时代，如何有效的吸引用户的注意力成为了重中之重，而一些深度阅读，思想深刻的长篇大论，反倒不那么受人待见，除非它是一个“爆款”文章，潜意识的让人觉得读完后会受益匪浅，那么对于广大的普通受众来说，他才会考虑耐心去细细品读，当然这也和本身文章内容质量很高有关，它确实吸引人，观点新颖，但很多类似的好文章可能只有石沉大海的宿命。就像微信公众号里的文章，判断文章质量的评判标准更多会从是否是“十万+”出发，似乎这已经成为了“优秀”的一种标志。而一些观点深邃，逻辑更为严谨复杂的好文章，它对受众形成了一定的阅读门槛，可能它就失去了成为“十万+”的可能。</p><p>曾几何时《太阳报》的成功，推动了其他竞争对手的进步，但随着竞争的愈演愈烈，各家报纸都开始提供更low的新闻以博取大众眼球，艳俗新闻以及暴力死亡事件中对血腥场景的过度描述。再到后面一些纸媒开始报道假新闻，最终引起了绝大部分人的反感。甚至为了获取利益刊登一些虚假广告，对广告主的背景不作具体的了解，刊登广告的门槛越来越低，引起了诸多社会问题。最终没过几年，这样的乱象就消亡了。</p><p>这种形式和如今的一些互联网传媒行业是如此相似，只不过是从线下搬到了线上，而且由于技术不断的发展，基于新技术的新形式和新体验也成为了吸引用户注意力的重要手段之一。如今，每天都在产生着巨量的信息，过去所要担心的取材难题在当今时代基本不会成为重要的制约障碍。因为我们可取的素材遍地都是，更需要关注的是搜集后的整理和结合。因为如今每一个人都可以算是一个自媒体平台，能人辈出，即使单纯的模仿，对于一些人来说也会由于先入为主认为这是原创，从而有了成为“爆款”的可能，从而获得成为网红的机会。</p><p>其实在模式上，相比于曾经传统的纸媒行业，如今，媒体本身是可以不生产内容的，它们更多提供的是一个平台，每一个使用这个平台的自媒体人都够为它们创造流量。对于这些人来说，他们吸引了一大波粉丝的同时，也能从中为自己获取收益。因为某些时候，商家费劲花重金做的一个广告，产生的效益甚至不如请一个流量大V来做一次短视频宣传的价值。</p><p>关于内容价值和流量价值，记得在我上学时，课上总在强调内容为王，但当今的事实却是，内容没有发展起来的时候，更多都是以流量为主。这二者可以说同样重要，在某些方面或许其中的某一者的占比会高一些，但在互联网的大背景下，尤其是移动终端——智能手机的普及，流量显得尤为重要。传统媒体强调的内容为王的产业形态，在这样的时代背景下，虽然也依然重要，但流量带来的红利和影响力会让内容的价值更大，反过来流量的重要性也不断的凸显。</p><p>网红就如同时代的浪潮，随着时间，一浪高过一浪，不断有新的原创模式竞相出现。就个人而言，受制于自身知识的和技能水平，也难免会有创造力枯竭的时候，因为用户的注意力来的快去的快。而对于企业而言，关注的更多可能就是哪些新的技术手段，运营模式能便于用户生产出质量更高的内容，能最大化的吸引用户的注意力。</p><p>由于平台本身对于内容质量把控是有限度的，如果把控质量要求过高势必会造成内容量大幅度减少，难以吸引更多用户，太低又会产生诸如假新闻等的一系列问题。用户本身就偏向追逐一些“快餐式”阅读体验，简单轻松，不会需要很高的阅读门槛，也喜欢“鸡汤”，产生心理上的及时反馈，毕竟看似无害的东西谁又知道它真的就有用呢？类似《太阳报》时代不同纸媒曾经用过的手段，如今依然能看到它们的影子，成为了吸引用户注意力，保持较高平台流量的重要手段。大众传媒从来就不是高雅的产物，某种意义上而言，它也可以是低俗的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Thinking" scheme="https://www.shengshiyu.cn/categories/Thinking/"/>
    
    
      <category term="思考" scheme="https://www.shengshiyu.cn/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>新思想和旧思想</title>
    <link href="https://www.shengshiyu.cn/2018/12/03/%E6%96%B0%E6%80%9D%E6%83%B3%E5%92%8C%E6%97%A7%E6%80%9D%E6%83%B3/"/>
    <id>https://www.shengshiyu.cn/2018/12/03/新思想和旧思想/</id>
    <published>2018-12-02T16:00:00.000Z</published>
    <updated>2018-12-02T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="http://blog0508.oss-cn-beijing.aliyuncs.com/image/%E6%96%B0%E6%80%9D%E6%83%B3%E5%92%8C%E6%97%A7%E6%80%9D%E6%83%B3.jpg" alt="新思想和旧思想"></p><blockquote><p>知识的条条框框束缚住了你那想纷飞的思想翅膀，你的一切想法都将围绕着“我知道”“我很清楚”“社会原本就是这样的嘛！”打转。一旦这种“我什么都懂”的思想进驻到你的心里，那你就很有可能会失去了解事情真实面目的兴趣，而没有了这种兴趣，你就会丧失前进的动力，那么等待你的就只剩下百无聊赖的空虚日子了。</p></blockquote><p>新的“新思想”和旧的“新思想”，“新”不一定就代表了一种进步和对旧有事物的否定，旧的思想中可能蕴含着一些我们未充分认识的创新点，一旦机会成熟，旧有的思想就会成为一种潮流，至少在我看来，设计就是一个这样的过程，旧有的设计理念和一些“新思想”结合，却能成为一种潮流。</p><p>我们的认知观念里总认为旧有的东西就是落后的，就应该被淘汰的，因为有了继承于它的更好的方式，但那或许仅仅是继承原有的一个点，新旧本身并不应该作为衡量价值的标准。就像销量高的产品并不一定就代表质量好一样，人类总是倾向于接受和他们内心认知看法接近的事物，因为它们不必为此否定自身，就像我们的新闻一样，我们很难看到相悖的两种形式的新闻。</p><p>“主流”的思想将一些“异端”思想给排斥在外，但更多时候我们会发现，两种相悖的观点事实上它们都是正确的，不同的环境，不同的时代背景，不同的利用和转化方式，都可以作为我们评判一种思想是否具有价值的参考条件。</p><p>成长的过程，就是我们不断地发现过去家长、老师们教的某些东西开始具有了“片面性”，随着我们对其更深入全面的了解，随着我们阅历的加深，我们会衍生出自己的一套价值判断标准，但我们也会无意识地将与自身观点相悖的思想排斥在外，以维护我们自身观点的“正确性”，尤其是随着我们年龄的增长，我们更原意接受符合我们价值判断标准的事。</p><p>当我们摒弃了新旧思想之争，从全新的角度出发，去发现不同观点背后存在的可能性，勇于接受它们，判断哪一种更符合时代的发展的某种需要，哪一种更适合自身，去理解“变化”，避免使自己陷入思维的死角，找到在不同情境下最适宜的技巧。那么旧思想也可以成为”新的旧思想“，它也会有机会在如今的时代里绽放不一样的光芒。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Thinking" scheme="https://www.shengshiyu.cn/categories/Thinking/"/>
    
    
      <category term="思考" scheme="https://www.shengshiyu.cn/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>PO、VO、BO、DTO、POJO、DAO之间的关系</title>
    <link href="https://www.shengshiyu.cn/2018/11/22/PO%E3%80%81VO%E3%80%81BO%E3%80%81DTO%E3%80%81POJO%E3%80%81DAO%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
    <id>https://www.shengshiyu.cn/2018/11/22/PO、VO、BO、DTO、POJO、DAO之间的关系/</id>
    <published>2018-11-21T16:00:00.000Z</published>
    <updated>2018-11-21T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><h1 id="PO（persistant-object持久对象）"><a href="#PO（persistant-object持久对象）" class="headerlink" title="PO（persistant object持久对象）"></a>PO（persistant object持久对象）</h1><p>PO就是数据库中的一条记录，只是把一条记录作为一个对象处理，可以方便的转化为其他对象。有时也被称为Data对象，对应数据库中的entity。PO中不应该包含任何对数据库的操作。PO是向数据库中添加新数据时创建，删除数据库中数据时削除的。并且它只能存活在一个数据库连接中，断开连接即被销毁。PO有状态的，每个属性代表其当前的状态。它是物理数据的对象表示。使用它，可以使我们的程序与物理数据解耦，并且可以简化对象数据与物理数据之间的转换。PO的属性是跟数据库表的字段一一对应的</p><h1 id="VO（value-object值对象-view-object表现层对象"><a href="#VO（value-object值对象-view-object表现层对象" class="headerlink" title="VO（value object值对象/view object表现层对象)"></a>VO（value object值对象/view object表现层对象)</h1><p>主要对应界面显示的数据对象,可以和表对应，也可以不，这根据业务的需要。VO是用new关键字创建，由GC回收。存活在业务层，是业务逻辑使用的，他存活的的目的就是为数据提供一个生存的地方。VO的属性是根据当前业务的不同而不同的，也就是说，它的每一个属性都一一对应当前业务逻辑所需要的数据的名称。</p><p>一个VO可以只是PO的部分，也可以是多个PO构成，同样也可以等同于一个PO（当然我是指他们的属性）。正因为这样，PO独立出来，数据持久层也就独立出来了，它不会受到任何业务的干涉。又正因为这样，业务逻辑层也独立开来，它不会受到数据持久层的影响，业务层关心的只是业务逻辑的处理，至于怎么存怎么读交给别人吧！不过，另外一点，如果我们没有使用数据持久层，那么PO和VO也可以是同一个东西，但这并不好。</p><h1 id="BO-business-object业务对象"><a href="#BO-business-object业务对象" class="headerlink" title="BO(business object业务对象)"></a>BO(business object业务对象)</h1><p>主要作用是把业务逻辑封装为一个对象。这个对象可以包括一个或多个其它的对象，通常需要将BO转化成PO，才能进行数据的持久化，反之，从DB中得到的PO，需要转化成BO才能在业务层使用。它只包含业务对象的属性或是方法，或者二者都包含。</p><h1 id="DTO（Data-Transfer-Object数据传输对象）"><a href="#DTO（Data-Transfer-Object数据传输对象）" class="headerlink" title="DTO（Data Transfer Object数据传输对象）"></a>DTO（Data Transfer Object数据传输对象）</h1><p>主要用于远程调用等需要大量传输对象的地方</p><h1 id="POJO（plain-ordinary-java-object-简单Java对象）"><a href="#POJO（plain-ordinary-java-object-简单Java对象）" class="headerlink" title="POJO（plain ordinary java object 简单Java对象）"></a>POJO（plain ordinary java object 简单Java对象）</h1><p>一个最常见的的对象了，只有属性字段及setter和getter方法,属于一个中间对象，可以转化为PO、DTO、VO，一个POJO持久化之后就是PO；POJO在传输过程中，就会转化为DTP，这个传输过程就是DTO；POJO用作表示层就是VO</p><h1 id="DAO（data-access-object数据访问对象）"><a href="#DAO（data-access-object数据访问对象）" class="headerlink" title="DAO（data access object数据访问对象）"></a>DAO（data access object数据访问对象）</h1><p>学习数据库时遇到最多的对象了，它负责持久层的操作,主要用来封装对数据库的访问，提供数据库的CRUD操作.通过他可以把POJO持久化为PO，</p>]]></content>
    
    <summary type="html">
    
      关于PO、VO、BO、DTO、POJO、DAO，这几个是我们在开发中经常遇到的专业术语缩略词，这里专门总结下它们各自之间所代表的意思以及区别
    
    </summary>
    
      <category term="Technology" scheme="https://www.shengshiyu.cn/categories/Technology/"/>
    
    
      <category term="Java" scheme="https://www.shengshiyu.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>谈谈产品需求分析</title>
    <link href="https://www.shengshiyu.cn/2018/11/07/%E8%B0%88%E8%B0%88%E4%BA%A7%E5%93%81%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/"/>
    <id>https://www.shengshiyu.cn/2018/11/07/谈谈产品需求分析/</id>
    <published>2018-11-06T16:00:00.000Z</published>
    <updated>2018-11-06T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="http://blog0508.oss-cn-beijing.aliyuncs.com/image/%E8%B0%88%E8%B0%88%E4%BA%A7%E5%93%81%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90.jpg" alt="谈谈产品需求分析"></p><p>创新扩散理论里提到的认知特征，相对优越性，它相对于其他产品是否更优越，体现在什么方面，本质上是不是加快了信息传播的速度；兼容性，它和生活的融合度如何，是否能够在生活中有应用的可能；复杂性，它是否操作简单，利于人们上手直接操作；可实验性，它是否具有试用的机会，而且实验过后能把握用户的痛点，让用户能喜欢上；可观察性，新技术的显示度如何，是否能引起广泛的社会讨论，这个可能需要运营来促进这一过程的推进，提高技术曝光度。</p><p>对于一个好的产品而言，我们要确立标准，培养用户对于产品的习惯性的认知，它的外观是不是很具有标志性，我们能在众多的产品中很容易识别出来，不用花费很多心力，它的哪几个功能很有特色，是它所独有的，又或者它做的就是比一般的同类产品好，在易用性上取胜，而且在功能上应该比外观上更为重要，因为用户选择我们的产品，仅仅是为了更好的解决他们手头的任务。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Thinking" scheme="https://www.shengshiyu.cn/categories/Thinking/"/>
    
    
      <category term="思考" scheme="https://www.shengshiyu.cn/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>浅谈Java线程池</title>
    <link href="https://www.shengshiyu.cn/2018/11/01/%E6%B5%85%E8%B0%88Java%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <id>https://www.shengshiyu.cn/2018/11/01/浅谈Java线程池/</id>
    <published>2018-10-31T16:00:00.000Z</published>
    <updated>2018-10-31T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Technology" scheme="https://www.shengshiyu.cn/categories/Technology/"/>
    
    
      <category term="Java" scheme="https://www.shengshiyu.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>HTTP指北</title>
    <link href="https://www.shengshiyu.cn/2018/10/24/HTTP%E6%8C%87%E5%8C%97/"/>
    <id>https://www.shengshiyu.cn/2018/10/24/HTTP指北/</id>
    <published>2018-10-23T16:00:00.000Z</published>
    <updated>2018-10-23T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p><img src="http://blog0508.oss-cn-beijing.aliyuncs.com/image/HTTP%E6%8C%87%E5%8C%971.jpg" alt="HTTP指北1"></p><h1 id="HTTP概述"><a href="#HTTP概述" class="headerlink" title="HTTP概述"></a>HTTP概述</h1><p>HTTP是应用层的协议，当我们打开一个网页时，例如：<a href="http://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com</a>,浏览器会将这个域名地址发送给DNS服务器，然后解析为具体的IP地址。</p><p>建立好连接后，浏览器就可以发送HTTP的请求了，而一个完整的HTTP请求报文由三部分组成：<strong>请求行</strong>、<strong>请求头（首部）</strong>、<strong>请求体（实体）</strong>。每一行的末尾都有回车和换行，在请求体和请求头之间另起一行。其中请求行指定的是请求方法、请求URL、协议版本；请求头是以key:value这样的键值对的形式存在的，请求体就是要传输的数据。<br><img src="http://blog0508.oss-cn-beijing.aliyuncs.com/image/HTTP%E6%8C%87%E5%8C%972.jpg" alt="HTTP指北2"></p><p>HTTP里有很多请求方法，其中最常用的就那么几个，对于访问网页来说，使用的最多的就是<strong>GET</strong>方法，用来向服务器端获取一些资源，具体返回什么，由服务端来决定。</p><p>另一个常用的请求方法类型是<strong>POST</strong>，它需要你主动告诉服务端一些信息，一般这些信息放在请求体里，与GET不同，POST更多是用来更新资源信息，GET提交请求的数据实体是放在URL后面，用?来分割，参数用&amp;连接，而且数据长度是有限制的，视具体的客户端而定，而POST没有限制，而且GET提交的数据是不安全的，因为相关参数会暴露在URL上。</p><p>还有一种类型，叫做<strong>PUT</strong>，它的作用是向指定资源位置上传最新内容，类似于FTP协议，文件内容包含在请求体里，不过HTTP服务器一般是不允许上传文件的，所以PUT和POST就都变成了要传给服务器内容的方法。</p><p>最后一种比较常见的方法就是<strong>DELETE</strong>，主要就是用来删除文件，是与PUT相反的方法，DELETE是要求返回URL指定的资源。</p><p>请求行的下面就是请求头了，保存了一些很重要的字段，例如, <strong>Content-Type</strong> 是指正文格式，如果是JSON格式的，就要把值设为JSON，而类似 <strong>Accept-Charset</strong> 则表示客户端可以接受的字符集，避免不必要的乱码。首部字段有很多，其实通过名字我们就能大概它的用法的，用到的时候可以想了解细节再去查。</p><p>当我们使用HTTP发送请求时，由于它是基于<strong>TCP</strong>协议，所以它使用面向连接的方式发送请求，在发送每段报文时，都需要对方回应一个ACK，确认已经到达，如果没有收到对方的回复，TCP就会重新进行传输，直到到达为止，而这个过程是TCP负责的，也就是说无论重新传输了几次，对于HTTP来说它只进行了一次传输，由TCP来完成这个送达的过程。</p><p>TCP每发送一个报文都会加上自己本身所在的地址以及它想要到达的另一端的位置，将它们放在IP头里，然后交给IP层进行传输。IP层会查看目标地址和自己所在的地址是否同在一个局域网里，如果在的话就发送ARP协议，获取目标地址的MAC地址，然后把自己的MAC地址和目标MAC地址放到MAC头发送出去，由另一端来进行层层对比确认，然后发送一个ACK，确认到达。如果不在一个局域网里，就要经过网关，而MAC头里放的就是网关的地址，因为我们不知道目标的MAC地址，网关再根据路由协议来获取下一跳的路由器MAC地址，然后加入到目标MAC地址那，由于还不是真正的目标MAC地址，会不断重复这个“寻找”的过程，直到下一跳是目标所在，然后获取到目标的MAC地址。</p><p>在TCP头里还有端口号，通过确认MAC地址，IP地址后，通过端口号，目标机器就会知道哪一个进程需要这个包，然后发送给那个进程，例如HTTP服务器，然后HTTP服务器就知道请求的资源是什么，然后把相关资源发送给客户端。</p><p>HTTP的返回报文和响应报文类似，简单来说响应报文由<strong>状态行</strong>、<strong>响应头（首部）</strong>、<strong>响应体（实体）</strong>组成，其中第一行是状态行，包含HTTP版本，状态码和状态短语，在一个回车换行之后是响应头，也是以键值对的形式，之后是响应体，也就是要传输的数据。</p><p><img src="http://blog0508.oss-cn-beijing.aliyuncs.com/image/HTTP%E6%8C%87%E5%8C%973.jpg" alt="HTTTP指北3"></p><h1 id="HTTP协议的特点"><a href="#HTTP协议的特点" class="headerlink" title="HTTP协议的特点"></a>HTTP协议的特点</h1><ul><li><strong>HTTP协议是无状态的</strong><br>什么是无状态，就是协议对于事务处理没有记忆能力，对于同一个URL请求没有上下文的联系，每一次的请求都是独立的，不会受前后结果的差异影响响应，但为了使它具有状态的特点，于是引入了 cookis 和 session 机制。</li><li><strong>基于TCP协议</strong><br>HTTP协议属于应用层，它的目的是规定客户端和服务端数据传输的格式和数据交互行为，而数据传输的实现，它是基于传输层TCP协议实现的，它本身并不能进行数据传输。</li></ul><h1 id="HTTP的响应状态码"><a href="#HTTP的响应状态码" class="headerlink" title="HTTP的响应状态码"></a>HTTP的响应状态码</h1><p>状态码是用来告知客户端服务器端处理请求的结果。凭借状态码用户可以知道服务器是请求处理成功、失败或者是被转发；这样出现了错误也好定位。状态码是由3位数字加原因短语组成。3位数字中的第一位是用来指定状态的类别。共有五个类别。<br><img src="http://blog0508.oss-cn-beijing.aliyuncs.com/image/HTTTP%E6%8C%87%E5%8C%974.png" alt="HTTTP指北3"><br>不过常用的也就16种，下面来详细介绍下：</p><p><strong>1. 200：OK</strong><br>代表请求被正常的处理成功</p><p><strong>2. 204：No Content</strong><br>请求处理成功，但是没有数据实体返回，也不允许有实体返回。比如说HEAD请求，可能就会返回204 No Content，因为HEAD就是只获取头信息。</p><p><strong>3. 206：Partial Content</strong><br>这是客户端使用Content-Range指定了需要的实体数据的范围，然后服务端处理请求成功之后返回用户需要的这一部分数据而不是全部，执行的请求就是GET。返回码就是206：Partial Content。</p><p><strong>4. 301： Moved Permanently</strong><br>代表永久性定向。该状态码表示请求的资源已经被分配了新的URL，以后应该使用资源现在指定的URL。也就是说如果已经把资源对应的URL保存为书签了，这是应该按照Location首部字段提示的URL重新保存。</p><p><strong>5. 302：Found</strong><br>代表临时重定向。该状态码表示请求的资源已经被分配了新的URL，但是和301的区别是302代表的不是永久性的移动，只是临时的。就是说这个URL还可能会发生改变。如果保存成书签了也不会更新。</p><p><strong>6. 303：See Other</strong><br>和302的区别是303明确规定客户端应当使用GET方法。</p><p><strong>7. 304：Not Modified</strong><br>该状态码表示客户端发送附带条件请求时，服务器端允许请求访问资源，但是没有满足条件。304状态码返回时不包含任何数据实体。304虽然被划分在3XX中但是和重定向没有关系。</p><p><strong>8. 307：Temporary Redirect</strong><br>临时重定向，与302 Found相同，但是302会把POST改成GET，而307就不会。</p><p><strong>9.  400：Bad Request</strong><br>表示请求报文中存在语法错误。需要修改后再次发送。</p><p><strong>10. 401：Unauthorized</strong><br>表示发送的请求需要有通过HTTP认证的认证信息。</p><p><strong>11. 403：Forbidden</strong><br>表明请求访问的资源被拒绝了。没有获得服务器的访问权限，IP被禁止等。</p><p><strong>12. 404：Not Found</strong><br>表明请求的资源在服务器上找不到。当然也可以在服务器拒绝请求且不想说明理由时使用。</p><p><strong>13. 408：Request Timeout</strong><br>表示客户端请求超时，就是在客户端和服务器建立连接后服务器在一定时间内没有收到客户端的请求。</p><p><strong>14. 500：Internal Server Error</strong><br>表明服务器端在执行请求时发生了错误，很有可能是服务端程序的Bug或者临时故障。</p><p><strong>15. 503：Service Unavailable</strong><br>表明服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。如果事先得知解除以上状况需要的时间，最好写入Retry-After字段再返回给客户端。</p><p><strong>16. 504：Getaway Timeout</strong><br>网关超时，是代理服务器等待应用服务器响应时的超时，和408 Request Timeout的却别就是504是服务器的原因而不是客户端的原因。</p>]]></content>
    
    <summary type="html">
    
      HTTP的重要性无需多言了，几乎是每一个人上网使用的第一个协议，尤其对于技术岗位来说理解掌握HTTP协议是必须的，这里记录了HTTP的基础知识以及一些常见的用法。
    
    </summary>
    
      <category term="Technology" scheme="https://www.shengshiyu.cn/categories/Technology/"/>
    
    
      <category term="HTTP" scheme="https://www.shengshiyu.cn/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>IOC与需求变化</title>
    <link href="https://www.shengshiyu.cn/2018/10/21/IOC%E4%B8%8E%E9%9C%80%E6%B1%82%E5%8F%98%E5%8C%96/"/>
    <id>https://www.shengshiyu.cn/2018/10/21/IOC与需求变化/</id>
    <published>2018-10-20T16:00:00.000Z</published>
    <updated>2018-10-20T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="http://blog0508.oss-cn-beijing.aliyuncs.com/image/IOC%E4%B8%8E%E9%9C%80%E6%B1%82%E5%8F%98%E5%8C%96.jpg" alt="IOC与需求变化"></p><p>需求变化是程序员需要面对的一个难题，尤其在需求频繁变更的情况下，这意味着我们可能又要加班加点忙活一阵了，不断地完成旧需求，又不断地解决新需求，凭借我们的直觉，实现需求即可，只要把要求的需求一个个按时完成上线就万事大吉，没有更多考虑到未来可能产生的需求变化。“僵硬”的构建过程所带来的就是日后依然需要投入很多时间处理需求变化，而非一个灵活的设计，可以不被需求牵着鼻子走，直接自己掌握多样化的需求。可以有效减少本没有必要出现的加班乱象。</p><p>控制反转（IOC）作为面向对象编程的一种设计思想，意味着在Java中，我们将设计好的对象交给容器来控制，而不是传统的操控对象本身，由对象内部再来作控制。具体来说，传统的程序设计是主动地创建一个具体对象，再将它们组合起来，其中一个类可能依赖于另一个类，所以我们需要由我们创建的对象去主动地获取依赖的对象。</p><p>控制反转思想则由容器来为我们完成查找相关依赖对象，再将它们注入进来的工作，然后我们就能获得我们需要的具体对象，因为我们只能被动接受依赖对象的注入，不再像传统过程一样，由我们自己创建自己去获取，这个过程被反转了，由容器来控制。通过依赖注入可以有效实现解耦，但IOC并不仅仅作用于此。</p><p>控制反转，是一种重要的设计思想，其实也比较好理解，我们买电脑时，可能对于外行人来说，什么处理器型号，显卡型号，内存大小啥的，他们可能听过，但对具体区别不是特别了解，如果再具体细分处理器是标压还是低压，超频多少，风扇转速之类的，他们会晕了的。他们只知道他们想要的是一台可以玩大型游戏，剪辑视频的电脑，又或者是一台轻薄便携续航长可以流畅办工上网的电脑。</p><p>我们不用专门给他们介绍具体硬件上参数型号的差异，因为他们认知里，电脑就是电脑，能实现这个需求的就可以称为“电脑”，就像能打电话聊天的便携设备就可以叫“手机”，我们不用去知道实现的具体标准是啥，它需要哪些硬件，啥处理器、显卡、内存之类的，这个标准早就由产业本身制定规划好了，用户的需求要在这个标准下才能满足，而非漫无目的根据用户的需求，实现了一堆充斥不知名硬件设备形似电脑的东西，虽然它也实现了我们对电脑的定义需要的种种需求，但这样也使得我们要疲于应对各式需求，想办法做出符合需求的东西。</p><p>有了一个标准，一个有效的设计模式，可以大大节省我们不必要的人力投入，用户需求将成为设计的约束条件和验证手段，而不是出发点和目标。这样可以避免需求的变化让我们疲于奔命的工作状态。毕竟，谁又喜欢经常性不必要的加班呢？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Technology" scheme="https://www.shengshiyu.cn/categories/Technology/"/>
    
    
      <category term="Java" scheme="https://www.shengshiyu.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>声望的陷阱</title>
    <link href="https://www.shengshiyu.cn/2018/10/11/%E5%A3%B0%E6%9C%9B%E7%9A%84%E9%99%B7%E9%98%B1/"/>
    <id>https://www.shengshiyu.cn/2018/10/11/声望的陷阱/</id>
    <published>2018-10-10T16:00:00.000Z</published>
    <updated>2018-10-10T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="http://blog0508.oss-cn-beijing.aliyuncs.com/image/%E5%A3%B0%E6%9C%9B%E7%9A%84%E9%99%B7%E9%98%B1.jpg" alt="声望的陷阱"></p><p><br></p><blockquote><p>命运是解不开的谜团，声望是没有实际意义的云烟。</p></blockquote><p>什么是声望？一个官方的解释是：声望是众所仰望的名声。人生在世，我们总有为声望所累的时候，但我的阅历尚浅，对于“声望”不好妄作评判，仅仅只能按我的理解，谈谈在当前时代下的“声望”的影响。</p><p>个人具有声望，组织和团体也具有声望，声望是一种看不见的影响力，它不好量化，但它却能无形中影响很多东西，就像我们玩的游戏，会有所谓的声望值，当你具备不同声望值时，就有权限获得一些稀有物品一样。</p><p>但游戏终究和现实不同，现实世界充满着许许多多的不确定性。可能具有很高声望的人或事物，会对人们的判断施加一定的影响，因为我们辨别和判断一件事物的好坏需要经过深思熟虑，这个过程对很多人而言并不那么“友好”，而具有了高声望，就能在判断上给予一定的肯定，简化了“深思熟虑”这项工作的任务量，因为声望的积累是基于大量的评价和时间的考量的，更能使人确信“它”对自身是有益的，由于思维的“惯性”我们就会自然而然选择了相信。</p><p>如同品牌效应，大厂出品一定会因为它完善的工艺和流程，质量上一定比同类产品更好。但销量高并不一定代表质量好，它们之间并不存在绝对意义上的正相关。对外部具有很高声望事物的盲目肯定，终会使我们的判断受制于对方。</p><p>假如没有了声望对判断施加的影响，那么真正吸引我们的，又是对方的什么呢？就拿衣食住行来说，我们选购一件衣物的判断，究竟是基于对品牌所积累的声望的信任，认为它一定用了优质的物料，一流的设计，还是商品本身质量就很不错呢？毕竟我们的世界是变化的，同样的产品或是服务，终究会随着时间的流逝产生差异的变动，很难“始终如一”。</p><p>如果商品和服务是我们还能切身在短时间内能感受到变化的，比较容易减小声望对人判断的影响。那么人呢？评判和了解一个人或许是一件复杂度极高的任务，我们难以短时间真正了解一个人，我们所基于的判断，来源于那个人的过去经历，例如他的受教育水平，是否具有本科学历，进而又要细分是否是名牌一流大学，因为那些大学本身所具有的声望能证明很多东西。如果是在校时就看在校的比赛获奖情况，进而又要区别看比赛的规模和大小，因为一些比赛具备参考价值，它确实选拔出了许多出色的人才，随着时间的积累，这个比赛所积累的声望就成为了一种“隐性标志”，暗示只要我获奖了，那么代表了我和曾经获奖的那些名人也具备同样的素质和潜力，而名人的成功也间接为类似比赛的声望添砖加瓦。但事物是变化的，我们只能保证在那样一个时间段里，它确实具有参考价值，含金量十足，但随着时代的发展，事物的更迭，能时刻保持领先，并始终拥有与之匹配的声望的事物是何其稀少。</p><p>当前的时代是网络时代，处于这个时代背景下的我们无法避免声望对我们判断施加的影响，而且网络的虚拟化，谁又知道一切是真的，而非虚张声势搭建起来的声望呢？网上购物商城的一些评价可以通过刷单刷好评取得消费者的信任，而最近大火的抖音，我们可以搬运别人的创意，成为自己涨粉的途径，哪怕只是从一些科普常识上搬运一些看起来有价值的东西，加上一个相关行业的背景，却能带来巨大的流量，点赞量和粉丝量无形为其树立起了某种声望，因为这类开放平台的用户量太多了，聚集了不同层次的人，但点赞量和粉丝量却是“一视同仁”的。</p><p>在这样的时代里，最能直接影响声望变化的，或许就是建立于社交媒体之上的舆论导向的，通过巧妙刻意的包装，引起舆论的关注，随即带来巨大的流量，无论是提高声望还是影响竞争对手的声望，都是无形的，如果对方的公关不能应对得当，那么就会陷入舆论的漩涡，或许可以通过一些形式“洗白”，但也依然会产生一些无形的影响，而往往这些“看不见”的东西更具风险性。</p><p>不要因为“声望”影响了我们对真实世界的认知，它可以作为评判的依据和参考，但不能作为先入为主的第一选择，无论是对任何事物，亦或是任何人，我们要关注于那些真正决定其本身的东西，避免陷入声望的陷阱。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Thinking" scheme="https://www.shengshiyu.cn/categories/Thinking/"/>
    
    
      <category term="思考" scheme="https://www.shengshiyu.cn/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>Vector、ArrayList、LinkedList的区别</title>
    <link href="https://www.shengshiyu.cn/2018/10/02/Vector%E3%80%81ArrayList%E3%80%81LinkedList%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://www.shengshiyu.cn/2018/10/02/Vector、ArrayList、LinkedList的区别/</id>
    <published>2018-10-01T16:00:00.000Z</published>
    <updated>2018-10-01T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Technology" scheme="https://www.shengshiyu.cn/categories/Technology/"/>
    
    
      <category term="Java" scheme="https://www.shengshiyu.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>我为何会选择技术之路</title>
    <link href="https://www.shengshiyu.cn/2018/09/28/%E6%88%91%E4%B8%BA%E4%BD%95%E4%BC%9A%E9%80%89%E6%8B%A9%E6%8A%80%E6%9C%AF%E4%B9%8B%E8%B7%AF/"/>
    <id>https://www.shengshiyu.cn/2018/09/28/我为何会选择技术之路/</id>
    <published>2018-09-27T16:00:00.000Z</published>
    <updated>2018-09-27T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="http://blog0508.oss-cn-beijing.aliyuncs.com/image/%E6%88%91%E4%B8%BA%E4%BD%95%E4%BC%9A%E9%80%89%E6%8B%A9%E6%8A%80%E6%9C%AF%E4%B9%8B%E8%B7%AF.jpg" alt="我为何会选择技术之路"></p><blockquote><p>你会发现，曾经后悔走上的弯路或许是人生的必然曾经那些看似无法改变的路程，都可以彻底调整。我们没有走过弯路，就不会知道什么是直路。</p></blockquote><p>回顾往昔，当初我为何会选择技术这一条路，与接触新媒体息息相关，理解了媒介变化的本质，就理解了技术在其中所产生的作用。在这个时代，能推动信息流动的加快，那么这样的技术是富有潜力的，而信息流动的加快在人类的发展中始终都是至关重要的。同样的信息，过去使用书信往来，现在使用微信互动，传播的速度也是大相径庭的。也因为信息流动的加快，使得人与人之间，组织与组织之间因为地理位置差异所造成的隔阂不断缩小，我们能更频繁的进行贸易的往来，文化的交流等等，媒介就像是催化剂，它不能对事物的变化起决定作用，但它可以推动这个变化的速度，加快频率，那我们就能在同样的时间单位里完成更多的事。</p><p>媒介的发展，亦即传播速度的加快，在我看来，不仅仅是数据传输速度的加快，还包括处理的速度，也就是信息背后所包含的思想是否更容易被吸收和理解。不同媒介的传播速度是不一样的，文字作为人类文明承载信息的重要媒介之一，其本身却不是一个出色的媒介，通过文字所记录的信息，难免会在传递的过程中，由于个体的背景差异产生一些信息的失真。尤其我们在阅读一本晦涩难懂的书时，很难将作者所要表达的原意通过文字完完整整的解析出来，如果这本书还是翻译的版本，又会在翻译的过程中不可避免的损失一部分信息，全靠译者来把关，如果译者水平有限。。。那就只能听天由命或者直接选择阅读原著了。</p><p>相对于文字来说，人们更容易接受从图像中获取信息，而文字最初的产生。如中国古代的象形文字，或是苏美尔人所创的楔形文字，它们雏形的诞生，都多为图像。这也说明我们了解世界最开始某种程度上来说是从图像开始的。如今我们获取信息的渠道更多了，承载信息的主要方式不再以文字记录为主，图片、视频、音频、VR技术等新的形式，它们更多都从视觉的接受度上出发，在传播的过程中更利于被人们接受。</p><p>通过某种方式对信息进行加工，实现信息在传输和理解的“便利”化，一定程度上是可以推动信息的流动，但取决于“加工”的形式。例如我们可以精炼出一本书的核心要义，将一本书最核心的观点进行总结和转述，用便于人们理解的简洁明了的方式进行传播，那么其他人就可以在很短的时间里完成了“阅读”一本书的任务。但这个方式更多依赖于那个所谓的“领读者”，他不一定能完整的按原作者的思路和逻辑进行转述，而原作者本身是希望你通过阅读他的那本书的过程来完成你和他之间的信息传递。</p><p>当然我们也可以通过更好的表述，将原作者希望表达真实意思再现，原本他需要用很多的文字和语言来作为表述他那个想法的载体，现在你可以用更少的文字和语言实现同样的想法，或是通过其他方式，例如音视频、图片等等，说不定比文字更好实现你想要表达的东西。但这样的方式要更困难。这也是为啥除了文字，还有绘画、音乐等形式也在历史的长河中熠熠生辉。它们本身也承载着各自不同的文化底蕴，也因为如此，容纳了很多信息在形式之中，需要我们以恰当的方式“解读”出来。</p><p>对原有信息的“精炼”，将信息量缩减这样的方式，一旦逐渐发展成为了主流，大众便逐渐失去了接受信息后对信息的“再处理”的能力，简化信息量，使得用户不用思考便能吸收理解，真的好吗？抖音，今日头条，微信公众号，微博，它们通过不同的交互手段和信息呈现形式，不断地冲刷和改变着人们的意识流。我们的世界观似乎不再是由我们自己来主导，而是由这些新媒介，它们逐渐把控着我们对世界，对人和事物的认知。新媒介的发展不应如此，它的本质应该是使用户接受原有信息的效率更高，通过技术手段实现多样化的表现形式，发掘触觉，听觉，视觉等等方面，因为媒介是“人的延伸”，根本上的重构信息的展现形式，毕竟文字并不是一个很好的用来表现思想的媒介，重新唤醒人们接受信息，处理信息的深度思考的能力。</p><p>在我看来，“每天听本书”这样类似的形式，将原有体系精炼肢解后，以人们最便于直接理解，最易获得及时反馈的形式并不应该成为主流，即使因为工作生活原因，挤不出更多时间阅读思考，也不应该将这个过程“外包”出去。过程本身对自身思维的训练比直接获得结果更为重要。</p><p>纠结于文字本身，何不将重心往其他媒介上靠拢试试呢？一旦有了一个更为恰当的方式，不以牺牲个人主动思考的能力为主，那么它确实具备了促进人类的进步的意义和价值，它的出现令人们主动地去判断信息的价值。而技术本身对于实现这样的“新媒介”是有重要意义的，因为不同技术本身也有各自的特性，适用于解决的问题也有所不同，没有最好的，只有最适合的。只要通过技术能实现和解决这些旧有痛点，就是颠覆的可能，创建新的行业形式。</p><p>反之，技术仅仅被用于去提高原有“错误形式”的影响力，那么技术始终只是技术。比起实现需求，分析需求背后所带来的价值比单纯的需求更为重要。我为何会选技术之路，因为我希望看到不同技术背后对社会和人的影响，如果它并不能带来积极的影响，促使人和社会的进步，我希望我能发现更好的形式。这一切的基石是技术，需要靠它来实现，也只有自身更懂技术才能更好的实现这一过程。只有这样，技术在我手中才具有了意义，不再限定于程序员本身。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Thinking" scheme="https://www.shengshiyu.cn/categories/Thinking/"/>
    
    
      <category term="思考" scheme="https://www.shengshiyu.cn/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat学习总结</title>
    <link href="https://www.shengshiyu.cn/2018/09/23/Tomcat%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>https://www.shengshiyu.cn/2018/09/23/Tomcat学习总结/</id>
    <published>2018-09-22T16:00:00.000Z</published>
    <updated>2018-09-22T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="关于Tomcat"><a href="#关于Tomcat" class="headerlink" title="关于Tomcat"></a>关于Tomcat</h1><h1 id="Tomcat的目录结构"><a href="#Tomcat的目录结构" class="headerlink" title="Tomcat的目录结构"></a>Tomcat的目录结构</h1>]]></content>
    
    <summary type="html">
    
      Tomcat是一个免费的开源的Serlvet容器
    
    </summary>
    
      <category term="Technology" scheme="https://www.shengshiyu.cn/categories/Technology/"/>
    
    
      <category term="Java" scheme="https://www.shengshiyu.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>浅析Java泛型</title>
    <link href="https://www.shengshiyu.cn/2018/09/19/%E6%B5%85%E6%9E%90Java%E6%B3%9B%E5%9E%8B/"/>
    <id>https://www.shengshiyu.cn/2018/09/19/浅析Java泛型/</id>
    <published>2018-09-18T16:00:00.000Z</published>
    <updated>2018-09-18T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Technology" scheme="https://www.shengshiyu.cn/categories/Technology/"/>
    
    
      <category term="Java" scheme="https://www.shengshiyu.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>如何阅读一本技术类书籍</title>
    <link href="https://www.shengshiyu.cn/2018/09/17/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E6%8A%80%E6%9C%AF%E7%B1%BB%E4%B9%A6%E7%B1%8D/"/>
    <id>https://www.shengshiyu.cn/2018/09/17/如何阅读一本技术类书籍/</id>
    <published>2018-09-16T16:00:00.000Z</published>
    <updated>2018-09-16T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="http://blog0508.oss-cn-beijing.aliyuncs.com/image/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E6%8A%80%E6%9C%AF%E7%B1%BB%E4%B9%A6%E7%B1%8D.jpg" alt="如何阅读一本技术类书籍"></p><p>前不久重读了《如何阅读一本书》，这本书成书时并没有计算机相关的读物，在介绍阅读不同读物的方法时，我认为技术类的书籍可能更接近于它里面所提到的科学与数学，而且更多偏实用型而非理论型，并且计算机一类的阐述特定技术的书时新性很强，随着技术的更新换代，很多都会过时，这一点在其他一类的书上没那么明显，一旦过时，其实用性就会大大下降，这里结合我的认知，谈一下关于技术类书籍应该如何阅读。</p><p>这里指的阅读，并非粗读或是泛读，虽然很多技术类的书也可以作为手册，需要的时候再进行查阅即可，但也不乏很多经典，它们需要我们细细品读，结合实践会不断提高我们的技术水平。这里总结了一些值得参考的书：<a href="https://www.douban.com/doulist/110527931/" target="_blank" rel="noopener">每一个程序员都值得读的经典</a></p><p>首先我们明确它是否属于论说类的书籍，其次我们要分析这本书是否属于理论性的，类似《算法导论》一类的书，还是属于实用性的，类似《effective java》这样的书。</p><p>然后我们可以用几句话简单的叙述一下这本书主要讲了啥，将书里面重要的章节列举出来，说明它是如何根据某种逻辑来组成一个相应体系的，进而能够用来解决实际问题。关注作者希望通过这本书来为我们解决一个什么样的具体问题，这个问题属于哪一类别。因为计算机体系的模块化，抽象化和层次化，所以不同的书针对的方向和层次也是不一样的。</p><p>然后我们要关注一些重要的名词，看是否在翻译的版本中所要表达的东西是你印象里熟悉的那一个概念，然后我们要关注一些核心重要的部分，因为技术类的书具有很完整的逻辑，我们要对这些重要且难以理解的部分去理顺逻辑，看作者是如何逐步叙述他所要表达的内容的。如果是因为欠缺了某一部分的内容，造成了阅读过程中理解的困难，如果你觉得跳过，并不影响后续阅读，而且它并不属于这本书的核心内容，或是所描述的技术类别已经过时了，那么你可以先跳过。反之，我们可能需要花一些时间去了解一下那些与此相关的我们所不懂的概念，然后再尝试回过头阅读，看逻辑是否通畅，是否能继续读下去。当然这个过程最好的方式就是多实践，将其中的一些能够实现的东西，自己尝试做一下，可能很多不理解的东西就理解了。</p><p>在你对作者的一些实践方法作出评价之前，你最好已经明白了它的所有细节，你知道作者想要以此解决的问题，并且你也亲自实现过，然后你才可以对所谓的“最佳实践”作出判断；因为有的“最佳实践”所针对的只是那个特定的历史时期。然后你就可以通过类比得出适合自己的技术实践方式，不断地去更新这些“最佳实践”，可以使你的开发效率和代码质量不断提高。</p><p>尊重书中作者和你个人观点的不同，通过实践来证明，是否作者是针对某一特定的环境，而不是普遍的情况，寻找各自的理论基础作为支撑，另外技术类的书更新换代很快，我们在看一些经典“老书”时，要学会判断哪些观点和看法是过时了的，哪些是真知灼见，去吸收那些依然有用的思想洞见。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Thinking" scheme="https://www.shengshiyu.cn/categories/Thinking/"/>
    
    
      <category term="思考" scheme="https://www.shengshiyu.cn/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>Java内部类的理解</title>
    <link href="https://www.shengshiyu.cn/2018/09/12/Java%E5%86%85%E9%83%A8%E7%B1%BB%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>https://www.shengshiyu.cn/2018/09/12/Java内部类的理解/</id>
    <published>2018-09-11T16:00:00.000Z</published>
    <updated>2018-09-11T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Technology" scheme="https://www.shengshiyu.cn/categories/Technology/"/>
    
    
      <category term="Java" scheme="https://www.shengshiyu.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>String、StringBuffer、StringBuilder的区别浅析</title>
    <link href="https://www.shengshiyu.cn/2018/08/26/String%E3%80%81StringBuffer%E3%80%81StringBuilder%E7%9A%84%E5%8C%BA%E5%88%AB%E6%B5%85%E6%9E%90/"/>
    <id>https://www.shengshiyu.cn/2018/08/26/String、StringBuffer、StringBuilder的区别浅析/</id>
    <published>2018-08-25T16:00:00.000Z</published>
    <updated>2018-08-25T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Technology" scheme="https://www.shengshiyu.cn/categories/Technology/"/>
    
    
      <category term="Java" scheme="https://www.shengshiyu.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>关于JavaScript中的继承机制</title>
    <link href="https://www.shengshiyu.cn/2018/08/21/%E5%85%B3%E4%BA%8EJavascript%E4%B8%AD%E7%9A%84%E7%BB%A7%E6%89%BF%E6%9C%BA%E5%88%B6/"/>
    <id>https://www.shengshiyu.cn/2018/08/21/关于Javascript中的继承机制/</id>
    <published>2018-08-20T16:00:00.000Z</published>
    <updated>2018-08-20T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p><img src="http://blog0508.oss-cn-beijing.aliyuncs.com/image/%E5%85%B3%E4%BA%8EJavascript%E4%B8%AD%E7%9A%84%E7%BB%A7%E6%89%BF%E6%9C%BA%E5%88%B6.jpg" alt="关于Javascript中的继承机制"></p><h1 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h1><p>传统的面向对象语言里，基本都支持继承的两种方式：<strong>接口继承</strong>和<strong>实现继承</strong>。接口继承<strong>继承方法签名</strong>，而实现继承则<strong>继承实际的方法</strong>。至于JavaScript里的继承，由于函数没有签名，只能支持实现继承，而且主要通过<strong>原型链</strong>来实现的。每一个<strong>构造函数</strong>都有一个<strong>原型对象</strong>，原型对象都包含一个<strong>指向构造函数的指针</strong>，而实例又都包含一个<strong>指向原型对象的内部指针</strong>，通过使用原型，将方法添加在”父类“的原型里，然后”子类“的原型就是父类的一个实例化对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SubClass.prototype = <span class="keyword">new</span> SuperClass() ;</span><br></pre></td></tr></table></figure></p><p>如此层层递进，就构成了<strong>实例与原型的链条</strong>，这就是原型链。但原型链也有问题，原先实例的属性会在这个继承的过程中顺理成章的成为其“子类”的原型属性。而且创建的”子类“的实例，无法在不影响所有对象实例的情况下，像”超类“的构造函数传递参数，于是有了构造函数继承。</p><h1 id="构造函数继承"><a href="#构造函数继承" class="headerlink" title="构造函数继承"></a>构造函数继承</h1><p>构造函数继承的核心思想就是<code>SuperClass.call(this)</code>,通过<code>call()</code>和<code>apply()</code>方法，<strong>在新创建的对象上执行构造函数，然后改变this的指向，使通过this创建的属性和方法在子类中复制一份，因为是单独复制的，所以各个实例化的子类互不影响。但是会造成内存浪费的问题</strong>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperClass</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.colors = [<span class="string">"read"</span>,<span class="string">"blue"</span>,<span class="string">"yellow"</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubClsss</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">SuperClass.call(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="组合式继承"><a href="#组合式继承" class="headerlink" title="组合式继承"></a>组合式继承</h1><p>组合式继承，也叫作伪经典继承，结合了前两者的特点，既不会使每个实例化的“子类”互相影响，也避免了内存的浪费。它<strong>使用原型链实现对原型属性和方法的继承，而通过构造函数来实现对实例属性的继承</strong>。既可以在原型上定义方法实现实现函数复用，又能保证每个实例都有它自己单独的属性。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperClass</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.colors = [<span class="string">"read"</span>,<span class="string">"blue"</span>,<span class="string">"yellow"</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SuperClass.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubClass</span>(<span class="params">name, age</span>)</span>&#123;</span><br><span class="line"><span class="comment">//继承属性</span></span><br><span class="line">SuperClass.call(<span class="keyword">this</span>, name);</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//继承方法</span></span><br><span class="line">SubClass.prototype = <span class="keyword">new</span> SuperClass</span><br><span class="line">SubClass.prototype.constructor = SubClass;</span><br><span class="line">SubClass.prototype.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h1><p>寄生式继承的思路是<strong>创建一个仅用于封装继承过程的函数，该函数的内部以某种方式来增强对象，然后返回对象</strong>，就像所有都是它做的一样，很像工厂模式。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyClass</span>(<span class="params">original</span>)</span>&#123;</span><br><span class="line"><span class="comment">//通过调用函数创建一个新对象</span></span><br><span class="line">    <span class="keyword">var</span> clone = object(original);</span><br><span class="line">    clone.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Hello"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="keyword">return</span> clone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不过使用这种模式来为对象添加函数，会因为不能做到函数复用而降低效率，所以出现了寄生组合式继承。</p><h1 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h1><p>组合式继承的方法固然好，但是会导致一个问题，父类的构造函数会被创建两次（call()的时候一遍，new的时候又一遍），所以为了解决这个问题，又出现了寄生组合继承。集寄生式继承和组合继承的优点于一身，本质上就是<strong>使用寄生式继承来继承“超类”的原型，然后再将结果指定给“子类”的原型。</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritObject</span>(<span class="params">subClass,superClass</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//复制一份父类的原型保存在变量中</span></span><br><span class="line"><span class="keyword">var</span> p = inheritObject(superClass.prototype);</span><br><span class="line">    <span class="comment">//修正因为重写子类原型导致子类constructor属性被修改</span></span><br><span class="line">p.constructor = subClass;</span><br><span class="line">    <span class="comment">//设置子类的原型</span></span><br><span class="line">    subClass.prototype = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义父类</span></span><br><span class="line"><span class="keyword">var</span> SuperClass = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.books = [<span class="string">'javascript'</span>,<span class="string">'html'</span>,<span class="string">'css'</span>]</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="comment">//定义父类原型方法</span></span><br><span class="line">SuperClass.prototype.getBooks = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.books)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//定义子类</span></span><br><span class="line"><span class="keyword">var</span> SubClass = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    SuperClass.call(<span class="keyword">this</span>,name)</span><br><span class="line">&#125;</span><br><span class="line">inheritObject(SubClass,SuperClass);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> subclass1 = <span class="keyword">new</span> SubClass(<span class="string">'Java'</span>)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Technology" scheme="https://www.shengshiyu.cn/categories/Technology/"/>
    
    
      <category term="JavaScript" scheme="https://www.shengshiyu.cn/tags/JavaScript/"/>
    
  </entry>
  
</feed>
